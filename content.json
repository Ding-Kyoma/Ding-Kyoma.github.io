{"meta":{"title":"Yiding's Blog","subtitle":"","description":"Technology blog website","author":"Yiding Wang","url":"https://blog.kyoma.top","root":"/"},"pages":[{"title":"","date":"2022-05-28T16:27:51.411Z","updated":"2022-05-28T16:27:51.402Z","comments":true,"path":"404.html","permalink":"https://blog.kyoma.top/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除 您可以尝试在搜索框输入关键词来寻找文章~"},{"title":"所有分类","date":"2022-05-27T14:04:05.383Z","updated":"2022-05-27T14:04:05.376Z","comments":true,"path":"categories/index.html","permalink":"https://blog.kyoma.top/categories/index.html","excerpt":"","text":""},{"title":"","date":"2022-05-28T13:19:28.885Z","updated":"2022-05-28T13:19:28.878Z","comments":true,"path":"about/index.html","permalink":"https://blog.kyoma.top/about/index.html","excerpt":"","text":"关于我来自留美大四的学生. 在计算机专业中主要朝向机器学习. 平常喜欢折腾计算机的东西 (๑＞ڡ＜)☆ 为了舒适出国折腾软路由, 折腾VPS, 折腾CDN转发, 折腾DDNS 分发给小伙伴 为了舒适看番折腾madVR渲染, 折腾SVP补帧, 折腾b站港澳台的弹幕, 折腾RSS订阅 为了台式机能好好的干活装了又拆,拆了又装, 给它上了很多不需要的配件… 这个博客也是突然觉得需要有, 就折腾出来了. 打算记录一下学习的东西, 用来将来能更好的回忆. 同时也记录一些遇到的问题和解决的方法, 希望能帮助到他人. 记录于2022年5月27日"},{"title":"","date":"2022-05-26T10:25:26.120Z","updated":"2022-05-26T10:25:26.096Z","comments":true,"path":"mylist/index.html","permalink":"https://blog.kyoma.top/mylist/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2022-05-27T14:03:25.124Z","updated":"2022-05-27T14:03:25.115Z","comments":true,"path":"tags/index.html","permalink":"https://blog.kyoma.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"nginx 404 重定向","slug":"nginx-404-重定向","date":"2022-05-30T12:07:10.000Z","updated":"2022-05-30T14:04:43.211Z","comments":true,"path":"posts/1003/","link":"","permalink":"https://blog.kyoma.top/posts/1003/","excerpt":"","text":"简单记录一下如何将 nginx 404 页面重定向为 404.html Step. 1 打开配置文件查看配置文件路径 1systemctl status nginx.service 123456789101112131415● nginx.service - nginx - high performance web server Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled) Drop-In: /etc/systemd/system/nginx.service.d └─override.conf Active: active (running) since Mon 2022-05-30 14:30:24 CST; 5h 41min ago Docs: https://nginx.org/en/docs/ Process: 15035 ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf (code=exited, status=0/SUCCESS) Process: 15038 ExecStartPost=/bin/sleep 0.1 (code=exited, status=0/SUCCESS) Main PID: 15036 (nginx) Tasks: 2 (limit: 2340) Memory: 5.2M CPU: 34.140s CGroup: /system.slice/nginx.service ├─15036 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf └─15037 nginx: worker process Process: 15035 ExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx -c /etc/nginx/nginx.conf 看出配置文件地址 编辑配置文件 1vim /etc/nginx/nginx.conf Step. 2 添加404页面在http中添加 1fastcgi_intercept_errors on; 在server里添加 1error_page 404 /404.html; Step. 3 重启1systemctl restart nginx.service","categories":[{"name":"建站","slug":"建站","permalink":"https://blog.kyoma.top/categories/%E5%BB%BA%E7%AB%99/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://blog.kyoma.top/tags/nginx/"}]},{"title":"tensorflow 自定义指标 - MacroRecall & MacroF1","slug":"tensorflow-自定义指标-MacroRecall-MacroF1","date":"2022-05-29T05:41:30.000Z","updated":"2022-05-29T06:14:36.280Z","comments":true,"path":"posts/1003/","link":"","permalink":"https://blog.kyoma.top/posts/1003/","excerpt":"","text":"Tensorflow 自带的指标不够用，尤其是处理不平衡数据集时，macro recall 可以指示出不被 classes weight 所影响的平均recall。 定义自定义指标 class 需要继承 tf.keras.metrics.Metric 解释一下其中的 function reset_states 每个epoch结束后清零 update_state 在一个epoch中每个step update的方式 result 返回的值 我在 class 中维护了一张 confusion_matrix 叫做total_cm。因此能很方便的计算macro recall，macro f1 等数值。 通过confusion_matrix可以计算其他很多的数值，可以通过修改process_confusion_matrix 来实现 用法下面定义了两个自定义指标 MacroRecall 和 MacroF1 ，使用的时候只要在model.compile时加进metrics即可。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071class MacroRecall(tf.keras.metrics.Metric): def __init__(self, num_classes=2, **kwargs): super(MacroRecall,self).__init__(name=&#x27;macro_recall&#x27;,**kwargs) # handles base args (e.g., dtype) self.num_classes=num_classes self.total_cm = self.add_weight(&quot;total&quot;, shape=(num_classes,num_classes), initializer=&quot;zeros&quot;) def reset_states(self): for s in self.variables: s.assign(tf.zeros(shape=s.shape)) def update_state(self, y_true, y_pred,sample_weight=None): self.total_cm.assign_add(self.confusion_matrix(y_true,y_pred)) return self.total_cm def result(self): return self.process_confusion_matrix() def confusion_matrix(self,y_true, y_pred): &quot;&quot;&quot; Make a confusion matrix &quot;&quot;&quot; y_true=tf.argmax(y_true,1) y_pred=tf.argmax(y_pred,1) cm=tf.math.confusion_matrix(y_true,y_pred,dtype=tf.float32,num_classes=self.num_classes) return cm def process_confusion_matrix(self): cm=self.total_cm diag_part=tf.linalg.diag_part(cm) # precision=diag_part/(tf.reduce_sum(cm,0)+tf.constant(1e-15)) recall=diag_part/(tf.reduce_sum(cm,1)+tf.constant(1e-15)) # f1=2*precision*recall/(precision+recall+tf.constant(1e-15)) return tf.reduce_sum(recall)/self.num_classes class MacroF1(tf.keras.metrics.Metric): def __init__(self, num_classes=2, **kwargs): super(MacroF1,self).__init__(name=&#x27;macro_f1&#x27;,**kwargs) # handles base args (e.g., dtype) self.num_classes=num_classes self.total_cm = self.add_weight(&quot;total&quot;, shape=(num_classes,num_classes), initializer=&quot;zeros&quot;) def reset_states(self): for s in self.variables: s.assign(tf.zeros(shape=s.shape)) def update_state(self, y_true, y_pred,sample_weight=None): self.total_cm.assign_add(self.confusion_matrix(y_true,y_pred)) return self.total_cm def result(self): return self.process_confusion_matrix() def confusion_matrix(self,y_true, y_pred): &quot;&quot;&quot; Make a confusion matrix &quot;&quot;&quot; y_true=tf.argmax(y_true,1) y_pred=tf.argmax(y_pred,1) cm=tf.math.confusion_matrix(y_true,y_pred,dtype=tf.float32,num_classes=self.num_classes) return cm def process_confusion_matrix(self): cm=self.total_cm diag_part=tf.linalg.diag_part(cm) precision=diag_part/(tf.reduce_sum(cm,0)+tf.constant(1e-15)) recall=diag_part/(tf.reduce_sum(cm,1)+tf.constant(1e-15)) f1=2*precision*recall/(precision+recall+tf.constant(1e-15)) return tf.reduce_sum(f1)/self.num_classes # modelmodel.compile(metrics=[&#x27;accuracy&#x27;,MacroRecall(num_classes),MacroF1(num_classes)])","categories":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"https://blog.kyoma.top/categories/Machine-Learning/"}],"tags":[{"name":"metrics","slug":"metrics","permalink":"https://blog.kyoma.top/tags/metrics/"}]},{"title":"m1 mac 如何完美开启 2k144 hidpi","slug":"m1-mac-如何完美开启-2k144-hidpi","date":"2022-05-28T07:48:48.000Z","updated":"2022-05-29T07:21:18.289Z","comments":true,"path":"posts/1002/","link":"","permalink":"https://blog.kyoma.top/posts/1002/","excerpt":"","text":"HiDPI是苹果的一个显示技术，若你外接显示器很糊说明没有开启HiDPI。网上很多教程使用虚拟镜像的方式来开启，但是有很多的缺点。这是在最新mac上开启hidpi的方法。 若你是使用intel芯片的话，可以使用一键脚本能轻轻松松开启hidpi。若你是新的Apple m1芯片电脑的话，跟着教程走吧 这里看是否是m1芯片电脑。 环境这是我的硬件环境 MacBook Pro（16英寸，2021年）芯片：Apple M1 Pro 版本：macOS 12.4 一根 type-c to HDMI 2.0 直连线 显示器：2560x1440@144 软件要求： SwitchResX 4.11.1 或者在未来mac寻找、安装更高版本的软件 开启方法Step. 1 安装软件首先安装 SwitchResX，链接在上面。安装的时候选择为电脑上所有用户安装 安装好后打开SwitchResX，记录下 Vendor 和 Product （这是个16进制数字，我这刚刚好都是数字） 这里没有显示Vendor 和Product 的小伙伴检查一下SwitchResX的版本是否是m1原生的，后面需要用到这两个值 Step. 2 制作配置文件在桌面新建个文件夹，命名为 DisplayVendorID-XXXX XXXX为 Vendor 小写数值。例如：DisplayVendorID-2164 然后，新建一个文件，命名为DisplayProductID-YYYY YYYY为Product 小写数值。 例如：DisplayProductID-2772。保存在上面创建的文件夹里。注意文件名不要有后缀。若你电脑不显示文件后缀的话要小心。 你有两个方法制作、填写DisplayProductID-YYYY内容 方法一：在这里在线制作配置文件, 并复制到DisplayProductID-YYYY 方法二：若你是标准2560x1440的16:9显示屏，可以修改下面的代码，并复制到DisplayProductID-YYYY 方法二：注意，这里 DisplayProductID 和 DisplayVendorID 要填十进制，所以你需要把之前十六进制的Vendor和Product 转换后填入。DisplayProductName 填上你的显示器名字，例如：SwitchResX4 - X2772CK。 12345678910111213141516171819202122232425&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;&lt;plist version=&quot;1.0&quot;&gt;&lt;dict&gt; &lt;key&gt;DisplayProductName&lt;/key&gt; &lt;string&gt;你的显示器名字&lt;/string&gt; &lt;key&gt;DisplayProductID&lt;/key&gt; &lt;integer&gt;53358&lt;/integer&gt; &lt;key&gt;DisplayVendorID&lt;/key&gt; &lt;integer&gt;4268&lt;/integer&gt; &lt;key&gt;scale-resolutions&lt;/key&gt; &lt;array&gt; &lt;data&gt;AAAKAAAABaAAAAABACAAAA==&lt;/data&gt; &lt;data&gt;AAAFAAAAAtAAAAABACAAAA==&lt;/data&gt; &lt;data&gt;AAAPAAAACHAAAAABACAAAA==&lt;/data&gt; &lt;data&gt;AAAHgAAABDgAAAABACAAAA==&lt;/data&gt; &lt;data&gt;AAAMgAAABwgAAAABACAAAA==&lt;/data&gt; &lt;data&gt;AAAGQAAAA4QAAAABACAAAA==&lt;/data&gt; &lt;data&gt;AAAKAgAABaAAAAABACAAAA==&lt;/data&gt; &lt;data&gt;AAAKrAAABgAAAAABACAAAA==&lt;/data&gt; &lt;data&gt;AAAFVgAAAwAAAAABACAAAA==&lt;/data&gt; &lt;data&gt;AAAGkAAAA7EAAAABACAAAA==&lt;/data&gt; &lt;/array&gt;&lt;/dict&gt;&lt;/plist&gt; 我在制作网站上添加了一个1680x945分辨率，个人感觉非常适合2560*1440的显示器。 这个文件分辨率包括2560x1440, 1280x720, 3840x2160, 1920x1080, 3200x1800, 1600x900, 2562x1440, 2732x1536, 1366x768, 1680x945 Step. 3 移动配置文件我们需要把DisplayVendorID-XXXX文件夹放入 /Library/Displays/Contents/Resources/Overrides/ 里 文件夹可以用快捷键 shift + cmd + g ，输入路径名快速打开 然而， 很多人第一次是没有 Overrides 文件夹的。我们偷懒一下，跑一下xzhih的one-key脚本，试图开启hidpi（然而并不会起作用）。 这时就创建好了 Overrides 文件夹。你可以再跑一遍代码卸载掉hidpi。Overrides 文件夹仍然是留着的。 1bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/xzhih/one-key-hidpi/master/hidpi.sh)&quot; 现在你可以将桌面上的DisplayVendorID-XXXX文件夹放入 /Library/Displays/Contents/Resources/Overrides/ 里了！需要输入电脑开机密码 如上图检查无误后重启电脑。 Step. 4 开启HiDPI打开SwitchResX，勾上并填写Startup分辨率和Scaled分辨率，这两个数值是两倍的关系。这里以 1680x945 做为例子。后面144hz是屏幕刷新率。按照你的硬件填。 注意，填入的Startup分辨率需要出现在制作的文件中，详见Step. 2 应用后，你就可以看到1680x945的HiDPI选项了~。若看不到的话线缆插拔一下，重启一下，捣鼓捣鼓就看到了 展示这是我开启后的效果，上图！ 若有问题可以在下面留言，我会第一时间看到回复的~","categories":[{"name":"macOS","slug":"macOS","permalink":"https://blog.kyoma.top/categories/macOS/"}],"tags":[{"name":"hidpi","slug":"hidpi","permalink":"https://blog.kyoma.top/tags/hidpi/"}]},{"title":"Hexo github图床国内加速方案","slug":"Hexo github图床国内加速方案","date":"2022-05-28T03:24:25.000Z","updated":"2022-05-30T15:23:56.137Z","comments":true,"path":"posts/1001/","link":"","permalink":"https://blog.kyoma.top/posts/1001/","excerpt":"","text":"我使用 hexo (volantis主题) + github pages ，picgo + github 图床 布置博客。众所周知，github在国内体验不佳，尤其是以raw.githubusercontent.com开头的网址。通常表现就是在国内图片加载不出，加载缓慢。因此，我使用国内的coding来加速github图床，使得国内也能顺利的浏览图片。 这里推荐一下 volantis主题，十分好用。其中配置有一个replace 可以轻松替换原有的github网址到coding网址 思路通过实时同步github图床到腾讯coding，网页加载的图床链接改为coding的图床。 优势 Coding 免费，不需要cdn等付费服务 实时：可以通过构建计划实时同步github图床 若使用hexo volantis主题不需要更改已存在md文件的图片链接，或者你可以找找你使用的主题中有没有「全局页面字符串替换」的功能 劣势 Coding 仓库最大容量2G，大的图床不适用 国外也是访问coding图床，相对偏慢 环境 已经拥有github图床 markdown编辑器（Typora）已经可以自动上传图片到图床 部署注册Coding，新建项目 选择 代码托管 构建流水线&amp;自动化测试 完成创建 首先创建令牌，右下角项目设置 记录一下用户名和密码，之后要用 接下来导入外部仓库 选择URL导入，填上你github图床仓库，并勾选公开仓库 接下来设置实时同步。选择构建计划 创建构建计划，并选择自定义构建过程 选择github，并选择图床仓库，确定 接下来选择文本编辑器，并将以下代码复制到里面 (替换你自己的) 1234567891011121314151617181920212223pipeline &#123; agent any stages &#123; stage(&quot;检出&quot;) &#123; steps &#123; checkout([ $class: &#x27;GitSCM&#x27;, branches: [[name: GIT_BUILD_REF]], userRemoteConfigs: [[ url: GIT_REPO_URL, credentialsId: CREDENTIALS_ID ]]]) &#125; &#125; stage(&#x27;拉取到Coding&#x27;) &#123; steps &#123; echo &quot;正在拉取&quot; sh &#x27;git push -f https://$CODING_NAME:$CODING_TOKEN@e.coding.net/你的团队名/项目名称/代码仓库名称.git HEAD:main&#x27; echo &quot;拉取完成&quot; &#125; &#125; &#125;&#125; 旧的仓库是master分支, 以上代码使用新的命名方式：main分支 同时，在环境变量中，添加之前记录的令牌用户名和密码，CODING_NAME和 CODING_TOKEN， 添加的时候选择保密 最后点击立即构建，看看是否成功~ 替换Coding图床若是使用的是volantis主题，_config.volantis.yml 里面有一个全局替换的选项， 123replace: - https://raw.githubusercontent.com/Ding-Kyoma/CloudPic/master/ =&gt; https://dingkyoma.coding.net/p/img/d/CloudPic/git/raw/master/ 在hexo generate的时候会自动将github的网址替换成coding的网址 若不是使用volantis主题，你需要看看你的主题是否有「全局页面字符串替换」的功能。若没需要手动替换链接为coding的链接，并且在自动上传的图床的工具中设置coding的网址 例子： raw.githubusercontent.com/Ding-Kyoma/CloudPic/master/img/(pid-69000196)空の色2.jpg dingkyoma.coding.net/p/img/d/CloudPic/git/raw/master/img/(pid-69000196)空の色2.jpg","categories":[{"name":"建站","slug":"建站","permalink":"https://blog.kyoma.top/categories/%E5%BB%BA%E7%AB%99/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.kyoma.top/tags/hexo/"},{"name":"图床","slug":"图床","permalink":"https://blog.kyoma.top/tags/%E5%9B%BE%E5%BA%8A/"}]}],"categories":[{"name":"建站","slug":"建站","permalink":"https://blog.kyoma.top/categories/%E5%BB%BA%E7%AB%99/"},{"name":"Machine Learning","slug":"Machine-Learning","permalink":"https://blog.kyoma.top/categories/Machine-Learning/"},{"name":"macOS","slug":"macOS","permalink":"https://blog.kyoma.top/categories/macOS/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://blog.kyoma.top/tags/nginx/"},{"name":"metrics","slug":"metrics","permalink":"https://blog.kyoma.top/tags/metrics/"},{"name":"hidpi","slug":"hidpi","permalink":"https://blog.kyoma.top/tags/hidpi/"},{"name":"hexo","slug":"hexo","permalink":"https://blog.kyoma.top/tags/hexo/"},{"name":"图床","slug":"图床","permalink":"https://blog.kyoma.top/tags/%E5%9B%BE%E5%BA%8A/"}]}